name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Setup CocoaPods
      run: |
        sudo gem install cocoapods
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Pod install (iOS dependencies)
      run: |
        cd ios
        pod install
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Run tests
      run: flutter test
      
    - name: Setup iOS certificates (if secrets are configured)
      if: ${{ env.IOS_CERTIFICATE_BASE64 != '' }}
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Create certificates directory
        mkdir -p ~/certs
        
        # Decode and install certificate
        echo $IOS_CERTIFICATE_BASE64 | base64 --decode > ~/certs/certificate.p12
        
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        security import ~/certs/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Build iOS (No Code Signing - for testing)
      run: |
        flutter build ios --release --no-codesign
        
    - name: Build iOS IPA (if certificates are configured)
      if: ${{ env.IOS_CERTIFICATE_BASE64 != '' }}
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
      run: |
        # Build with code signing
        flutter build ios --release
        
        # Create IPA
        mkdir -p build/ios/ipa
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/ios/Runner.xcarchive \
          archive
          
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ios/ExportOptions.plist
          
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ github.run_number }}
        path: |
          build/ios/iphoneos/Runner.app
          build/ios/ipa/*.ipa
        retention-days: 30
        
    - name: Upload to TestFlight (if configured)
      if: ${{ env.APP_STORE_CONNECT_API_KEY != '' && github.ref == 'refs/heads/main' }}
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        # Install App Store Connect CLI tools
        xcrun altool --upload-app \
          --type ios \
          --file build/ios/ipa/*.ipa \
          --apiKey $APP_STORE_CONNECT_KEY_ID \
          --apiIssuer $APP_STORE_CONNECT_ISSUER_ID
